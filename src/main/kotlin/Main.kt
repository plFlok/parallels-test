package org.example

import java.lang.Integer.min
import java.util.concurrent.Callable
import java.util.concurrent.CountDownLatch
import java.util.concurrent.ExecutorService
import java.util.concurrent.Executors
import java.util.concurrent.Future
import java.util.concurrent.ThreadPoolExecutor
import kotlin.reflect.KClass
import kotlin.reflect.full.primaryConstructor

const val THRESHOLD = 100
const val TEST1_EVENTS_COUNT = THRESHOLD / 2
const val TEST2_EVENTS_COUNT = THRESHOLD * 2

class Report(
    val clazz: String,
    val description: String,
    val totalTests: Int,
    val failedTests: Int
)

fun main() {
    val cpuCores = Runtime.getRuntime().availableProcessors()
    val threads = cpuCores
    val executor = Executors.newFixedThreadPool(threads) as ThreadPoolExecutor

    val reports = mutableListOf<Report>()
    reports.add(testLimiter("–≠–≤–µ–Ω—Ç–æ–≤ –º–µ–Ω—å—à–µ, —á–µ–º threshold: $TEST1_EVENTS_COUNT –ø—Ä–∏ threshold $THRESHOLD", TryIncrement::class, THRESHOLD, executor, TEST1_EVENTS_COUNT, 1000))
    reports.add(testLimiter("–≠–≤–µ–Ω—Ç–æ–≤ –º–µ–Ω—å—à–µ, —á–µ–º threshold: $TEST1_EVENTS_COUNT –ø—Ä–∏ threshold $THRESHOLD", IncrementAndAuthorize::class, THRESHOLD, executor, TEST1_EVENTS_COUNT, 1000))
    reports.add(testLimiter("–≠–≤–µ–Ω—Ç–æ–≤ –±–æ–ª—å—à–µ, —á–µ–º threshold: $TEST2_EVENTS_COUNT –ø—Ä–∏ threshold $THRESHOLD", TryIncrement::class, THRESHOLD, executor, TEST2_EVENTS_COUNT, 1000))
    reports.add(testLimiter("–≠–≤–µ–Ω—Ç–æ–≤ –±–æ–ª—å—à–µ, —á–µ–º threshold: $TEST2_EVENTS_COUNT –ø—Ä–∏ threshold $THRESHOLD", IncrementAndAuthorize::class, THRESHOLD, executor, TEST2_EVENTS_COUNT, 1000))

    executor.shutdown()


    println("\n–û—Ç—á—ë—Ç –ø–æ –≤—Å–µ–º —Ç–µ—Å—Ç–∞–º")
    reports.forEach{
        val emoji = if (it.failedTests == 0) { "‚úÖ" } else { "üö®" }
        println("–¢–µ—Å—Ç {${it.clazz}} \"${it.description}\".\n–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${it.totalTests}, –∑–∞–≤–∞–ª–µ–Ω–Ω—ã—Ö: ${it.failedTests} $emoji")
    }

}

fun <T : Limiter> testLimiter(
    testDescriotion: String,
    clazz: KClass<T>,
    threshold: Int,
    executor: ExecutorService,
    parallelTasksCount: Int,
    testIterations: Int = 100
): Report {
    println("Test $clazz")
    var totalTests = 0
    var failedTests = 0
    repeat(testIterations) { iteration ->
        totalTests++
        val limiter = clazz.primaryConstructor!!.call(threshold)
        val results = mutableListOf<Future<Boolean>>()
        // latch - —á—Ç–æ–±—ã —Ç–∞—Å–∫–∏ –Ω–µ –Ω–∞—á–∞–ª–∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è, –ø–æ–∫–∞ –≤—Å–µ –Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã.
        // latch.countDown –∑–∞–ø—É—Å—Ç–∏—Ç –∏—Ö –≤—Å–µ ~—Ä–∞–∑–æ–º
        val latch = CountDownLatch(1)
        val task = Callable {
            latch.await()
            limiter.hasAccess()
        }
        repeat(parallelTasksCount) {
            results.add(executor.submit(task))
        }
        latch.countDown()
        val allowedEvents = results.map { it.get() }.filter { it }.count()
        val requiredToAllowEvents = min(threshold, parallelTasksCount)
        if (allowedEvents != requiredToAllowEvents) {
            println(
                "–õ–∏–º–∏—Ç–µ—Ä ${limiter::class} –∑–∞–≤–∞–ª–∏–ª —Ç–µ—Å—Ç #$iteration, –æ–∂–∏–¥–∞–µ—Ç—Å—è $requiredToAllowEvents –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö —ç–≤–µ–Ω—Ç–æ–≤, –Ω–æ –ø–æ–ª—É—á–∏–ª–∏ $allowedEvents"
            )
            failedTests++
        }
    }
    return Report(clazz.toString(), testDescriotion, totalTests, failedTests)
}
